class Array
{
  func first()
  {
    return self[0];
  }
  
  func last()
  {
    if (self.count == 0)
    {
      return nil;
    }
    else
    {
      return self[self.count - 1];
    }
  }
  
  func each()
  {
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      yield(self[index]);
      index = index + 1;
    }
  }
  
  func each_with_index()
  {
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      yield(self[index], index);
      index = index + 1;
    }
  }
  
  func ==(other)
  {
    if (!(other is Array))
    {
      return false;
    }
    if (self.count != other.count)
    {
      return false;
    }
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      if (self[index] != other[index])
      {
        return false;
      }
      index = index + 1;
    }
    return true;
  }
  
  func to_bool()
  {
    return self.count != 0;
  }
  
  func join(separator = ", ")
  {
    var sep = separator; // TODO: fix because should not be needed
    var result = "";
    self.each_with_index() ^(item, index) {
      if (index != 0)
      {
        result = result + sep;
      }
      result = result + item.to_s;
    };
    return result;
  }
  
  func to_s()
  {
    return "[" + self.join() + "]";
  }

  func has?(item) {
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      if (self[index] == item) {
        return true;
      }
      index = index + 1;
    }
    return false;
  }

  func remove(item) {
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      if (self[index] == item) {
        return self.remove_at(index);
      }
      index = index + 1;
    }
  }
}
