/* Setup

createuser -s dablang_ex0003
createdb dablang_ex0003
[copy initial sql]
pbpaste | psql --user dablang_ex0003 dablang_ex0003

*/

/* Database schema:

CREATE SEQUENCE books_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

CREATE TABLE books (
    id integer NOT NULL,
    title character varying,
    author character varying,
    year integer
);

ALTER TABLE ONLY books ALTER COLUMN id SET DEFAULT nextval('books_id_seq'::regclass);

ALTER TABLE ONLY books ADD CONSTRAINT books_pkey PRIMARY KEY (id);

INSERT INTO books (title, author, year) VALUES
  ('The motor boys on the wing', 'Clarence Young', 1912),
  ('Choice of choices', 'John Haddad', 1905),
  ('The lotus of the Nile', 'Arthur Eaton', 1907);

*/

// PGconn *PQconnectdb(const char *conninfo);
[__import_pq]
func PQconnectdb<IntPtr>(conninfo<String>) {}

// ConnStatusType PQstatus(const PGconn *conn);
[__import_pq]
func PQstatus<Uint32>(conn<IntPtr>) {}

// void PQfinish(PGconn *conn);
[__import_pq]
func PQfinish<NilClass>(conn<IntPtr>) {}

// char *PQerrorMessage(const PGconn *conn);
[__import_pq]
func PQerrorMessage<String>(conn<IntPtr>) {}

// ExecStatusType PQresultStatus(const PGresult *res);
[__import_pq]
func PQresultStatus<Uint32>(res<IntPtr>) {}

// void PQclear(PGresult *res);
[__import_pq]
func PQclear<NilClass>(res<IntPtr>) {}

// PGresult *PQexec(PGconn *conn, const char *command);
[__import_pq]
func PQexec<IntPtr>(conn<IntPtr>, command<String>) {}

// int PQfnumber(const PGresult *res, const char *column_name);
[__import_pq]
func PQfnumber<Int32>(res<IntPtr>, column_name<String>) {}

// int PQntuples(const PGresult *res);
[__import_pq]
func PQntuples<Int32>(res<IntPtr>) {}

// char *PQgetvalue(const PGresult *res, int row_number, int column_number);
[__import_pq]
func PQgetvalue<IntPtr>(res<IntPtr>, row_number<Int32>, column_number<Int32>) {}
       
func validate(info, connection, result)
{
  var CONNECTION_OK = 0;
  var PGRES_COMMAND_OK = 1;
  var PGRES_TUPLES_OK = 2;
  var failed = false;
  var message;

  if (result)
  {
    var status = PQresultStatus(result);
    failed = (status != PGRES_COMMAND_OK) && (status != PGRES_TUPLES_OK);
  }
  else
  {
    failed = (PQstatus(connection) != CONNECTION_OK);
  }

  if (!failed)
  {
    return nil;
  }

  print(info);
  print(" failed: [");
  print(PQerrorMessage(connection));
  puts("].");
  if (result)
  {
    PQclear(result);
  }
  PQfinish(connection);
  exit(1);
}

func execute(conn, query)
{
  print(" > ");
  puts(query);
  var res = PQexec(conn, query);
  print(" >> result: ");
  print(PQresultStatus(res));
  puts(".");
  validate("SQL query", conn, res);
  return res;
}

func execute_noresult(conn, query)
{
  var res = execute(conn, query);
  PQclear(res);
}

func main()
{
  var conn = PQconnectdb("postgresql://dablang_ex0003@localhost/dablang_ex0003");

  validate("Connection to database", conn, nil);

  execute_noresult(conn, "BEGIN");

  var query = execute(conn, "SELECT * FROM books ORDER BY year");

  var title_num = PQfnumber(query, "title");
  var author_num = PQfnumber(query, "author");
  var year_num = PQfnumber(query, "year");

  puts(" >> column order: " + @[title_num, author_num, year_num].to_s);

  var i = 0;
  var nrows = PQntuples(query);

  puts(" >> retrieved " + nrows.to_s + " rows");

  while (i < nrows)
  {
    var title_ptr = PQgetvalue(query, i, title_num);
    var author_ptr = PQgetvalue(query, i, author_num);

    var<String> title = title_ptr;
    var<String> author = author_ptr;

    print(" >>> Row " + i.to_s + ": title = '");
    print(title);
    print("', author = '");
    print(author);
    print("'.");
    puts("");

    i = i + 1;
  }
}
