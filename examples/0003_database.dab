/* Database schema:

CREATE SEQUENCE books_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

CREATE TABLE books (
    id integer NOT NULL,
    title character varying,
    author character varying,
    year integer
);

ALTER TABLE ONLY books ALTER COLUMN id SET DEFAULT nextval('books_id_seq'::regclass);

ALTER TABLE ONLY books ADD CONSTRAINT books_pkey PRIMARY KEY (id);

INSERT INTO books (title, author, year) VALUES
  ('The motor boys on the wing', 'Clarence Young', 1912),
  ('Choice of choices', 'John Haddad', 1905),
  ('The lotus of the Nile', 'Arthur Eaton', 1907);

*/

// PGconn *PQconnectdb(const char *conninfo);
[__import_pq]
func PQconnectdb<IntPtr>(conninfo<String>) {}

// ConnStatusType PQstatus(const PGconn *conn);
[__import_pq]
func PQstatus<Uint32>(conn<IntPtr>) {}

// void PQfinish(PGconn *conn);
[__import_pq]
func PQfinish<NilClass>(conn<IntPtr>) {}

// char *PQerrorMessage(const PGconn *conn);
[__import_pq]
func PQerrorMessage<String>(conn<IntPtr>) {}

// ExecStatusType PQresultStatus(const PGresult *res);
[__import_pq]
func PQresultStatus<Uint32>(res<IntPtr>) {}

// void PQclear(PGresult *res);
[__import_pq]
func PQclear<NilClass>(res<IntPtr>) {}

// PGresult *PQexec(PGconn *conn, const char *command);
[__import_pq]
func PQexec<IntPtr>(conn<IntPtr>, command<String>) {}

func validate(info, connection, result)
{
  var CONNECTION_OK = 0;
  var PGRES_COMMAND_OK = 1;
  var failed = false;
  var message;

  if (result)
  {
    failed = (PQresultStatus(result) != PGRES_COMMAND_OK);
  }
  else
  {
    failed = (PQstatus(connection) != CONNECTION_OK);
  }

  if (!failed)
  {
    return nil;
  }

  print(info);
  print(" failed: ");
  puts(PQerrorMessage(connection));
  if (result)
  {
    PQclear(result);
  }
  PQfinish(connection);
  exit(1);
}

func execute_noresult(conn, query)
{
  print(" > ");
  puts(query);
  var res = PQexec(conn, query);
  validate("SQL query", conn, res);
  PQclear(res);
}

func main()
{
  var conn = PQconnectdb("postgresql://dablang_ex0003@localhost/dablang_ex0003");

  validate("Connection to database", conn, nil);

  execute_noresult(conn, "BEGIN");
}
