// Snake game, initial experiments with using FFI to access SDL2 library

// int SDL_Init(Uint32 flags)
[__import_sdl]
func SDL_Init<Int32>(flags<Uint32>) {}

// extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindow(const char *title,
//                                                      int x, int y, int w,
//                                                      int h, Uint32 flags);
[__import_sdl]
func SDL_CreateWindow<IntPtr>(title<String>, x<Int32>, y<Int32>, w<Int32>, h<Int32>, flags<Uint32>) {}

// void SDL_Delay(Uint32 ms)
[__import_sdl]
func SDL_Delay<NilClass>(ms<Uint32>) {}

// int SDL_PollEvent(SDL_Event* event)
[__import_sdl]
func SDL_PollEvent<Int32>(event<IntPtr>) {}

//SDL_Renderer* SDL_CreateRenderer(SDL_Window* window,
//                                 int         index,
//                               Uint32      flags)
[__import_sdl]
func SDL_CreateRenderer<IntPtr>(window<IntPtr>, index<Int32>, flags<Uint32>) {}

//int SDL_RenderClear(SDL_Renderer* renderer)
[__import_sdl]
func SDL_RenderClear<Int32>(renderer<IntPtr>) {}

//void SDL_RenderPresent(SDL_Renderer* renderer)
[__import_sdl]
func SDL_RenderPresent<NilClass>(renderer<IntPtr>) {}

// int SDL_SetRenderDrawColor(SDL_Renderer* renderer,
//                            Uint8         r,
//                            Uint8         g,
//                            Uint8         b,
//                            Uint8         a)
[__import_sdl]
func SDL_SetRenderDrawColor<Int32>(renderer<IntPtr>, r<Uint8>, g<Uint8>, b<Uint8>, a<Uint8>) {}

// int SDL_RenderDrawLine(SDL_Renderer* renderer,
//                        int           x1,
//                        int           y1,
//                        int           x2,
//                        int           y2)
[__import_sdl]
func SDL_RenderDrawLine<Int32>(renderer<IntPtr>, x1<Int32>, y1<Int32>, x2<Int32>, y2<Int32>) {}

// Uint64 SDL_GetPerformanceCounter(void)
[__import_sdl]
func SDL_GetPerformanceCounter<Uint64>() {}

// Uint64 SDL_GetPerformanceCounter(void)
[__import_sdl]
func SDL_GetPerformanceFrequency<Uint64>() {}

func draw_square(renderer, size, x, y, alpha, apple)
{
 // x = x * size;
 // y = y * size;

  SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
  SDL_RenderDrawLine(renderer, x + 2, y + 1, x + size - 4, y + 1);
  SDL_RenderDrawLine(renderer, x + 2, y + size - 2, x + size - 4, y + size - 2);
  SDL_RenderDrawLine(renderer, x + 1, y + 2, x + 1, y + size - 4);
  SDL_RenderDrawLine(renderer, x + size - 2, y + 2, x + size - 2, y + size - 4);
}

class SnakePoint
{
  var @x;
  var @y;
  func x()
  {
    return @x;    
  }
  func y()
  {
    return @y;
  }
  func x=(value)
  {
    @x = value;    
  }
  func y=(value)
  {
    @y = value;
  }
}

func main()
{
  var SDL_INIT_VIDEO = 32;
  var status = SDL_Init(SDL_INIT_VIDEO);
  print("SDL_Init: ");
  puts(status);

  var size = 20;
  var width = 40;
  var height = 30;

  var SDL_WINDOWPOS_UNDEFINED = 536805376;
  var SDL_WINDOWPOS_CENTERED =  805240832;
  var SCREEN_WIDTH = size * width;
  var SCREEN_HEIGHT = size * height;
  var SDL_WINDOW_SHOWN = 4;
  var SDL_WINDOW_OPENGL = 2;
  var window = SDL_CreateWindow("Example 0001: snake",
    SDL_WINDOWPOS_CENTERED,
    SDL_WINDOWPOS_CENTERED,
    SCREEN_WIDTH,
    SCREEN_HEIGHT,
    SDL_WINDOW_OPENGL);
  print("SDL_CreateWindow: ");
  puts(window);

  var SDL_RENDERER_ACCELERATED = 2;
  var SDL_RENDERER_PRESENTVSYNC = 4;
  var renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
  print("SDL_CreateRenderer: ");
  puts(renderer);

  var start_point = SnakePoint.new;
  start_point.x = 10;
  start_point.y = 5;
  var dx = 1;
  var dy = 0;
  var<Uint64> time = 0;
  var<Uint64> step = 500;

  var eventBuffer = ByteBuffer.new(2048);

  var<Uint64> mul_counter= 1000;
  var last_counter = SDL_GetPerformanceCounter() * mul_counter;
  var mod_counter = SDL_GetPerformanceFrequency();

  var snake = @[start_point];

  while (true)
  {
    var has_event = SDL_PollEvent(eventBuffer);

    if (has_event == 1)
    {
      var test1 = eventBuffer[0] == 0;    
      var test2 = eventBuffer[1] == 1;
      var test3 = eventBuffer[1] == 3;
      var test_right = eventBuffer[20] == 79;
      var test_left  = eventBuffer[20] == 80;
      var test_down  = eventBuffer[20] == 81;
      var test_up    = eventBuffer[20] == 82;
      var test_esc   = eventBuffer[20] == 27;
      
      if (test1 && test2) // SDL_QUIT
      {
        puts("QUIT");
        exit(0);
      }

      if (test1 && test3) // SDL_KEYDOWN
      {
        if (test_right) { dx =  1; dy =  0; }
        if (test_left)  { dx = -1; dy =  0; }
        if (test_down)  { dx =  0; dy =  1; }
        if (test_up)    { dx =  0; dy = -1; }
        if (test_esc)   { puts("ESC QUIT"); exit(0); }
      }
    }

    var current_counter = SDL_GetPerformanceCounter() * mul_counter;
    var dt = current_counter - last_counter;
    dt = dt / mod_counter;
    last_counter = current_counter;
    time = time + dt;

    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    snake.each() ^(point)
    {
      draw_square(renderer, size, point.x * size, point.y * size, 255, 0);
    };

    SDL_RenderPresent(renderer);
    SDL_Delay(16);

    if (time > step)
    {
      var new_point = SnakePoint.new;
      var last_point = snake.last;
      new_point.x = last_point.x + dx;
      new_point.y = last_point.y + dy;
      time = time - step;
      snake.insert(new_point);
    }
  }
}
