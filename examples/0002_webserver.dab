// int socket(int domain, int type, int protocol);
[__import_libc] func socket<Int32>(domain<Int32>, type<Int32>, protocol<Int32>) {}

// int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
// socklen_t - Int32
[__import_libc] func setsockopt<Int32>(socket<Int32>, level<Int32>, option_name<Int32>, option_value<IntPtr>, option_len<Int32>) {}

// int bind(int socket, const struct sockaddr *address, socklen_t address_len);
[__import_libc] func bind<Int32>(socket<Int32>, address<IntPtr>, address_len<Int32>) {}

// int listen(int socket, int backlog);
[__import_libc] func listen<Int32>(socket<Int32>, backlog<Int32>) {}

// int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
[__import_libc] func accept<Int32>(socket<Int32>, address<IntPtr>, address_len<IntPtr>) {}

// ssize_t read(int fildes, void *buf, size_t nbyte);
// ssize_t - Uint64
[__import_libc] func read<Uint64>(fildes<Int32>, buf<IntPtr>, nbyte<Uint64>) {}

// ssize_t write(int fildes, const void *buf, size_t nbyte);
[__import_libc] func write<Uint64>(fildes<Int32>, buf<IntPtr>, nbyte<Uint64>) {}

// int close(int fildes);
[__import_libc] func close<Int32>(fildes<Int32>) {}

func errcheck(test, message)
{
  if (test) {}
  else
  {
    print("ERROR: ");
    puts(message);
    exit(1);
  }
}

func main()
{
  puts("DabServer: hello!");

  var AF_INET = 2;
  var SOCK_STREAM = 1;
  var sock = socket(AF_INET, SOCK_STREAM, 0);
  errcheck(sock > 0, "socket");
      
  var SOL_SOCKET = 65535;
  var SO_REUSEADDR = 4;

  var option = ByteBuffer.new(4);
  option[0] = 1;
  option[1] = 0;
  option[2] = 0;
  option[3] = 0;

  var ret1 = setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, option, 4);
  errcheck(ret1 == 0, "setsockopt");
      
  var svr_addr = ByteBuffer.new(16);

  // sin_family
  svr_addr[1] = AF_INET;

  // sin_addr.s_addr
  svr_addr[4] = 0; 
  svr_addr[5] = 0;
  svr_addr[6] = 0;
  svr_addr[7] = 0;

  // sin_port - 8080 -> htons=> 36895
  svr_addr[2] = 31;
  svr_addr[3] = 144;

  var ret2 = bind(sock, svr_addr, 16);
  errcheck(ret2 == 0, "bind");
      
  var ret3 = listen(sock, 5);
  errcheck(ret3 == 0, "listen");

  var request_id = 0;

  var cli_addr = ByteBuffer.new(16);
  var cli_addr_len = ByteBuffer.new(8);

  var buffer = ByteBuffer.new(10240);
  var buffer_length = ByteBuffer.new(8);

  var favicon = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAz9JREFUWEft12tM12UUB/DPHy9cwswJhLdInLemZnZDM21oaxC5lK7rYrXepKtW1tZaF5utF61sy0VbbbrVcmoXnTVIMWJzXhaNZVY4IMxM8ILI0BQk+bdfj8nw9hJ8wfPq9zs7zznf8z3f5zl7YvHFEoz2MhZgiO5ZDShS461Y/DOvYEn35D0ny6sRgPpurPxsBA0RgHgPVf9f2l4AvQz0MnAJMtA3lez5DMkjKZ2/9/DHSv5ad/7rIvtxxiwklkDNh9R+HPxifRj5CCMKScrg5BH2l1L9Aadaz8TqysCgycxcT1tTcD5RT+Zshuaz6z0qn+8KYtIbTHiN4/tIziQW4+txHKtjxroAan8Z8fYAJGMGe1az5YELAEgdRfwUWfezdy1Hq6NSmLWJK3Mpvpbmn8PmjNuYXcb2J6lbzpR3GLeIzfOoLyFlBH0SueYltj5M3xTubQnxVyVeAEBkvuxq5tSy4SaaKoPjmKe54X0qF7FrabDd8QNthynPC///AyidzqEtwRax2dHO5kIS0yg8SPOvFE+8CIBJSxj/Ap8PpONkcMx+jJwV/PImdSsY+SgTX6dxW2Ak8hs2h8TBfJFGR1tIOK+B394m68HQomhtyOlk8byzoKAqaKD0ls5+T1wcEh74ntSR9B9Ev4FBmB2nSBlGWg67P2Hb/LDvqvuYvpryAlqquHwsM78JMcpu5/QM7CrC5KHM3Uf1Mn58JgSK9aNgJwPGUjKZIzuYUxNatSop9HTcc0xZyne5HNpKUhpjn2X8i6wdzol9IdZd1QwYTcl1HPkphD8zjkcvIO3mQG/FQmqKSEjkxiJGPUF9MeV3hurvaaL1AF+dpnXGWobfHdo2bSUHykifFpS/Ojkcu1hf5u4lKZONU2ncfhaA/oOZ9ilD88KG43tDH6OEhysoz6etkSsmkL+TY7tZnx0qy91E5qwAKhJu846g/ngHFU/RfjTcCVHsKFYEIGLuHA2kDOf6ZbTWkzyM9mYaNrJnDfF/QrKo97d+Se1H/Lkm2DJmBqFGovx9efCN2Mx6iPSpoZDWgzR8S9W7tLdc5BR0Sq9bvi7BWdAtdXcm6WWgl4FLgoEef5r18OO0h5/n/wJQoFIUf+T1TgAAAABJRU5ErkJggg==";

  while (true)
  {
    request_id = request_id + 1;
    puts("DabServer: waiting for connection...");
  
    var client_fd = accept(sock, cli_addr, cli_addr_len);
    errcheck(client_fd != -1, "accept");
    errcheck(cli_addr_len[0] == 16, "accept");

    var data = read(client_fd, buffer, 10240);
    puts("DabServer: read " + data.to_s + " bytes.\nREQUEST:");
    var request = String.new(buffer, data);
    puts(request);
    
    var response = "HTTP/1.1 200 OK\r\n" + 
      "Content-Type: text/html; charset=UTF-8\r\n" + 
      "Connection: close\r\n" + "\r\n" + 
      "Dab server #" + 
      request_id.to_s + 
      " says hello!\r\n";

    if (request.substring(0, 16) == "GET /favicon.ico") {
      puts("RETURN FAVICON");
      response = "HTTP/1.1 200 OK\r\n" + 
      "Content-Type: image/png\r\n" +
      "Content-Length: 901\r\n\r\n" +
      favicon.base64_decode();
    }
    else {
    puts("\nRESPONSE:");
    puts(response);
    }

    var length = response.length;
    var ret4 = write(client_fd, response, length);
    puts("DabServer: wrote " + ret4.to_s + " bytes.");
    errcheck(ret4.to_s == length.to_s, "write");

    var ret5 = close(client_fd);
    errcheck(ret5 == 0, "close");

    puts("");
  }
}
