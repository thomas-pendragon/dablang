class DabRecord {
  static func init(query<String>) {
    @@connection = Postgres.new("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  }
  static func connection() {
    return @@connection;
  }
  static func first() {
    var result = self.new;
    var data = DabRecord.connection.execute("SELECT * FROM books ORDER BY id ASC LIMIT 1");
    data.each() ^ (row) {
      result._fill(data, row);
    };
    return result;
  }
  func _fill(res, row) {
    var columns = res.columns;
    row.each_with_index() ^ (value, index) {
      var column = columns[index];
      // print(column.to_s + " -> "+ value.to_s + "\n");
      __set_instvar(self, column, value);
    };
  }
  static func transaction() {
    var t = DabRecrodTransaction.new();
    yield(t);
  }
};
class DabRecrodTransaction {
  func abort() {}
}

class OrmGenerator {

  func run(name) {
    @table_name = name.downcase.pluralize;
    @klass_name = name.titleize;

    puts("Create class '" + @klass_name + "' from table '" + @table_name + "'.");

    define_class(@klass_name, "DabRecord");
    
    var res = DabRecord.connection.execute("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = '" + @table_name + "' ORDER BY ordinal_position;");

    var index = 0;

    res.each() ^ (row) {
      puts(res.columns);
      puts(row);

      var name = row[0];

      puts("Field: "+name);

      define_method(@klass_name, name) ^ {
        return __get_instvar(self, name);
      };

      index = index + 1;
    };    

    //var xx = @pg.dump("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = 'books' ORDER BY ordinal_position;");
    //var yy = @pg.dump("SELECT * FROM books");
  } 
};

func level1() {
  DabRecord.init("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  var generator = OrmGenerator.new;
  generator.run("book");
}
