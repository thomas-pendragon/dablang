class DabRecord {
  static func init(query<String>) {
    @@connection = Postgres.new("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  }
  static func connection() {
    return @@connection;
  }
  static func first() {
    return self.new;
  }
};

class OrmGenerator {

  func run(name) {
    @table_name = name.downcase.pluralize;
    @klass_name = name.titleize;

    puts("Create class '" + @klass_name + "' from table '" + @table_name + "'.");

    define_class(@klass_name, "DabRecord");
    
    var res = DabRecord.connection.execute("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = '" + @table_name + "' ORDER BY ordinal_position;");

    var index = 0;

    res.each() ^ (row) {
      puts(res.columns);
      puts(row);

      var name = row[0];

      puts("Field: "+name);

      //var kn = @klass_name;
      define_method(@klass_name, name) ^ {
        //puts("this is field " + index.to_s);
        return @name;//__get_instvar(self, name);//"field_" + name;
      };

      index = index + 1;
    };    

    //var xx = @pg.dump("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = 'books' ORDER BY ordinal_position;");
    //var yy = @pg.dump("SELECT * FROM books");
  } 
};

func level1() {
  DabRecord.init("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  var generator = OrmGenerator.new;
  generator.run("book");
}
