class DabRecord {
  static func init(query<String>) {
    @@connection = Postgres.new("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  }
  static func connection() {
    return @@connection;
  }
  static func first() {
    var result = self.new;
    var data = DabRecord.connection.execute("SELECT * FROM books ORDER BY id ASC LIMIT 1");
    data.each() ^ (row) {
      result._fill(data, row);
    };
    return result;
  }
  func _fill(res, row) {
    var columns = res.columns;
    @_all_fields = Set.new();
    row.each_with_index() ^ (value, index) {
      var column = columns[index];
      // print(column.to_s + " -> "+ value.to_s + "\n");
      __set_instvar(self, column, value);
      __set_instvar(self, self._previous_name(column), value);
      @_all_fields.insert(column);
    };
  }
  func _previous_name(name) {
    return "__previous_" + name;
  }
  static func transaction() {
    var t = DabRecrodTransaction.new();
    DabRecord.connection.execute("BEGIN");
    yield(t);
  }
  func __construct() {
    @changed_fields = Set.new;
  }
  func changed?() {
    return @changed_fields.count > 0;
  }
  func changed_fields() {
    return @changed_fields;
  }
  func save() {
    @changed_fields.each() ^ (field) {
      var id = self.id;
      var value = __get_instvar(self, field);
      puts(">>> UPDATE " + field + " TO '" + value + "' for ID=" + id.to_s);
      DabRecord.connection.execute("UPDATE books SET " + field + " = '" + self._escape(value) + "' WHERE id = " + id.to_s);
    };
//    @changed_fields = Set.new;
//    @_all_fields.each() ^ (field) {
//     // __set_instvar(self, self._previous_name(field), __get_instvar(self, field));
//    }
  }
  func _escape(str) {    
    var buffer = ByteBuffer.new(str.length * 2);
    PQescapeString(buffer, str, str.length * 2);
   # var<ByteBuffer> result1 = buffer;
    var<String> result = buffer;
    return result;
  }
};
class DabRecrodTransaction {
  func abort() {
    DabRecord.connection.execute("ABORT");
  }
}

class OrmGenerator {

  func run(name) {
    @table_name = name.downcase.pluralize;
    @klass_name = name.titleize;

    puts("Create class '" + @klass_name + "' from table '" + @table_name + "'.");

    define_class(@klass_name, "DabRecord");
    
    var res = DabRecord.connection.execute("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = '" + @table_name + "' ORDER BY ordinal_position;");

    var index = 0;

    res.each() ^ (row) {
      puts(res.columns);
      puts(row);

      var name = row[0];

      puts("Field: "+name);

      define_method(@klass_name, name) ^ {
        return __get_instvar(self, name);
      };

      define_method(@klass_name, name + "=") ^ (value) {
        @changed_fields.remove(name);
        var previous = __get_instvar(self, self._previous_name(name));
        if (value != previous) {
          @changed_fields.insert(name);
        }
        return __set_instvar(self, name, value);
      };

      index = index + 1;
    };

    //var xx = @pg.dump("SELECT column_name, ordinal_position, column_default, is_nullable, data_type FROM information_schema.columns WHERE table_name = 'books' ORDER BY ordinal_position;");
    //var yy = @pg.dump("SELECT * FROM books");
  } 
};

func level1() {
  DabRecord.init("postgresql://dablang_ex0004@localhost/dablang_ex0004");
  var generator = OrmGenerator.new;
  generator.run("book");
}
