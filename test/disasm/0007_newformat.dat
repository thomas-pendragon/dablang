## CODE

44 41 42 00 03 00 00 00  00 00 00 00 00 00 00 00
c8 00 00 00 00 00 00 00  f2 00 00 00 00 00 00 00
05 00 00 00 00 00 00 00  64 61 74 61 00 00 00 00
00 00 00 00 00 00 00 00  c8 00 00 00 00 00 00 00
02 00 00 00 00 00 00 00  63 6f 64 65 00 00 00 00
00 00 00 00 00 00 00 00  ca 00 00 00 00 00 00 00
50 00 00 00 00 00 00 00  73 79 6d 64 00 00 00 00
00 00 00 00 00 00 00 00  1a 01 00 00 00 00 00 00
16 00 00 00 00 00 00 00  73 79 6d 62 00 00 00 00
00 00 00 00 00 00 00 00  30 01 00 00 00 00 00 00
30 00 00 00 00 00 00 00  66 65 78 74 00 00 00 00
00 00 00 00 00 00 00 00  60 01 00 00 00 00 00 00
5a 00 00 00 00 00 00 00  0a 00 00 22 00 00 1c ff
ff 00 22 00 00 1c ff ff  00 22 00 00 0f 00 00 04
00 00 00 ff ff 1b ff ff  00 01 00 00 11 01 00 c8
00 00 00 00 00 00 00 01  00 00 00 00 00 00 00 1b
ff ff 00 01 01 00 0f 02  00 04 00 01 00 ff ff 1b
ff ff 00 01 02 00 1c ff  ff 00 5f 5f 69 6e 69 74
00 61 00 62 00 63 00 66  6f 6f 00 6d 61 69 6e 00
1a 01 00 00 00 00 00 00  21 01 00 00 00 00 00 00
23 01 00 00 00 00 00 00  25 01 00 00 00 00 00 00
27 01 00 00 00 00 00 00  2b 01 00 00 00 00 00 00
00 00 ff ff cb 00 00 00  00 00 00 00 00 00 06 00
00 00 00 00 00 00 ff ff  00 00 04 00 ff ff d2 00
00 00 00 00 00 00 03 00  06 00 00 00 00 00 00 00
01 00 01 00 02 00 06 00  03 00 00 00 ff ff 00 00
05 00 ff ff d9 00 00 00  00 00 00 00 00 00 40 00
00 00 00 00 00 00 ff ff  00 00                  


## OPTIONS

--with-headers

## COMMENT

func foo(a<String>, b<Uint8>, c)
{
}

func main()
{
  print(reflect_method_arguments(foo));
  print("\n");
  print(reflect_method_argument_names(foo));
}

pbpaste | ruby src/compiler/compiler.rb --with-attributes --with-reflection  | ruby src/tobinary/tobinary.rb | hexdump -e '8/1 "%02x " "  " 8/1 "%02x " "\n"' | pbcopy

## EXPECT

/* disasm */
    W_HEADER 3
    W_OFFSET 0
    W_SECTION _DATA, "data"
    W_SECTION _CODE, "code"
    W_SECTION _SYMD, "symd"
    W_SECTION _SYMB, "symb"
    W_SECTION _FEXT, "fext"
    W_END_HEADER

_DATA:
/*      200: */ W_BYTE 10
/*      201: */ W_BYTE 0

_CODE:
/*      202: */ NOP 
/*      203: */ STACK_RESERVE 0
/*      206: */ RETURN RNIL
/*      209: */ NOP 
/*      210: */ STACK_RESERVE 0
/*      213: */ RETURN RNIL
/*      216: */ NOP 
/*      217: */ STACK_RESERVE 0
/*      220: */ REFLECT R0, S4, 0, 65535
/*      229: */ SYSCALL RNIL, 0, R0
/*      236: */ LOAD_STRING R1, 200, 1
/*      255: */ SYSCALL RNIL, 0, R1
/*      262: */ REFLECT R2, S4, 1, 65535
/*      271: */ SYSCALL RNIL, 0, R2
/*      278: */ RETURN RNIL
/*      281: */ NOP 

_SYMD:
/*      282: */ W_STRING "__init"
/*      289: */ W_STRING "a"
/*      291: */ W_STRING "b"
/*      293: */ W_STRING "c"
/*      295: */ W_STRING "foo"
/*      299: */ W_STRING "main"

_SYMB:
/*      304: */ W_SYMBOL 282
/*      312: */ W_SYMBOL 289
/*      320: */ W_SYMBOL 291
/*      328: */ W_SYMBOL 293
/*      336: */ W_SYMBOL 295
/*      344: */ W_SYMBOL 299

_FEXT:
/*      352: */ W_METHOD 0, -1, 203, 0, 6
                W_METHOD_ARG -1, 0
/*      378: */ W_METHOD 4, -1, 210, 3, 6
                W_METHOD_ARG 1, 1
                W_METHOD_ARG 2, 6
                W_METHOD_ARG 3, 0
                W_METHOD_ARG -1, 0
/*      416: */ W_METHOD 5, -1, 217, 0, 64
                W_METHOD_ARG -1, 0
