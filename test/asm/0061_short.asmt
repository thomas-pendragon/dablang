## CODE

func fun1()
{
  print("fun1");
  return false;
}

func fun2()
{
  print("fun2");
  return true;
}

func main_and()
{
  print(fun1() && fun2());
}

func main_or()
{
  print(fun1() || fun2());
}

func main()
{
  main_and();
  main_or();
}

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 2
                                 W_SECTION _DATA, "data"
                                 W_SECTION _SDAT, "data"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _CODE, "code"
                                 W_SECTION _FUNC, "func"
                                 W_END_HEADER 
 
                   _DATA:
                                 W_STRING "fun1" 
                                 W_STRING "fun2" 
 
                   _SDAT:
                                 W_STRING "fun1" 
                                 W_STRING "fun2" 
                                 W_STRING "main" 
                                 W_STRING "main_and" 
                                 W_STRING "main_or" 
 
                   _SYMB:
/* fun1         */               W_SYMBOL _SDAT + 0 
/* fun2         */               W_SYMBOL _SDAT + 5 
/* main         */               W_SYMBOL _SDAT + 10 
/* main_and     */               W_SYMBOL _SDAT + 15 
/* main_or      */               W_SYMBOL _SDAT + 24 
 
                   _CODE:
                                 NOP 
 
                   Ffun1:
                                 STACK_RESERVE 0
/* "fun1"       */               Q_SET_STRING R0, _DATA + 0, 4
/* PRINT        */               Q_SET_SYSCALL RNIL, 0, R0
                                 Q_SET_FALSE R1
                                 Q_RETURN R1
 
                   Ffun2:
                                 STACK_RESERVE 0
/* "fun2"       */               Q_SET_STRING R0, _DATA + 5, 4
/* PRINT        */               Q_SET_SYSCALL RNIL, 0, R0
                                 Q_SET_TRUE R1
                                 Q_RETURN R1
 
                   Fmain:
                                 STACK_RESERVE 0
/* main_and     */               Q_SET_CALL RNIL, S3
/* main_or      */               Q_SET_CALL RNIL, S4
                                 Q_RETURN RNIL
 
                   Fmain_and:
                                 STACK_RESERVE 0
/* fun1         */               Q_SET_CALL R0, S0
                                 Q_JMP_IF2 R0, L1, L2
                   L1:
/* fun2         */               Q_SET_CALL R0, S1
                                 JMP L2
                   L2:
/* PRINT        */               Q_SET_SYSCALL RNIL, 0, R0
                                 Q_RETURN RNIL
 
                   Fmain_or:
                                 STACK_RESERVE 0
/* fun1         */               Q_SET_CALL R0, S0
                                 Q_JMP_IF2 R0, L3, L4
                   L4:
/* fun2         */               Q_SET_CALL R0, S1
                                 JMP L3
                   L3:
/* PRINT        */               Q_SET_SYSCALL RNIL, 0, R0
                                 Q_RETURN RNIL
 
                   _FUNC:
/* fun1         */               W_METHOD 0, -1, Ffun1
/* fun2         */               W_METHOD 1, -1, Ffun2
/* main         */               W_METHOD 2, -1, Fmain
/* main_and     */               W_METHOD 3, -1, Fmain_and
/* main_or      */               W_METHOD 4, -1, Fmain_or
