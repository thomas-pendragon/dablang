## CODE

func fun1()
{
  print("fun1");
  return false;
}

func fun2()
{
  print("fun2");
  return true;
}

func main_and()
{
  print(fun1() && fun2());
}

func main_or()
{
  print(fun1() || fun2());
}

func main()
{
  main_and();
  main_or();
}

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _DATA, "data"
                                 W_SECTION _CODE, "code"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_END_HEADER 
 
                   _DATA:
                                 W_STRING "fun1" 
                                 W_STRING "fun2" 
 
                   _CODE:
                                 NOP 
 
                   F__init:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_END:
                                 NOP 
 
                   Ffun1:
                                 STACK_RESERVE 0
/* "fun1"       */               LOAD_STRING R0, _DATA + 0, 4
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 LOAD_FALSE R1
                                 RETURN R1
                   __Ffun1_END:
                                 NOP 
 
                   Ffun2:
                                 STACK_RESERVE 0
/* "fun2"       */               LOAD_STRING R0, _DATA + 5, 4
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 LOAD_TRUE R1
                                 RETURN R1
                   __Ffun2_END:
                                 NOP 
 
                   Fmain:
                                 STACK_RESERVE 0
/* main_and     */               CALL RNIL, S4
/* main_or      */               CALL RNIL, S5
                                 RETURN RNIL
                   __Fmain_END:
                                 NOP 
 
                   Fmain_and:
                                 STACK_RESERVE 0
/* fun1         */               CALL R0, S1
                                 JMP_IF R0, L1, L2
                   L1:
/* fun2         */               CALL R0, S2
                                 JMP L2
                   L2:
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Fmain_and_END:
                                 NOP 
 
                   Fmain_or:
                                 STACK_RESERVE 0
/* fun1         */               CALL R0, S1
                                 JMP_IF R0, L3, L4
                   L4:
/* fun2         */               CALL R0, S2
                                 JMP L3
                   L3:
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Fmain_or_END:
                                 NOP 
 
                   _SDAT:
                                 W_STRING "__init" 
                                 W_STRING "fun1" 
                                 W_STRING "fun2" 
                                 W_STRING "main" 
                                 W_STRING "main_and" 
                                 W_STRING "main_or" 
 
                   _SYMB:
/* __init       */               W_SYMBOL _SDAT + 0 
/* fun1         */               W_SYMBOL _SDAT + 7 
/* fun2         */               W_SYMBOL _SDAT + 12 
/* main         */               W_SYMBOL _SDAT + 17 
/* main_and     */               W_SYMBOL _SDAT + 22 
/* main_or      */               W_SYMBOL _SDAT + 31 
 
                   _FUNC:
/* __init       */               W_METHOD 0, -1, F__init, 0, __F__init_END - F__init
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* fun1         */               W_METHOD 1, -1, Ffun1, 0, __Ffun1_END - Ffun1
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* fun2         */               W_METHOD 2, -1, Ffun2, 0, __Ffun2_END - Ffun2
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main         */               W_METHOD 3, -1, Fmain, 0, __Fmain_END - Fmain
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main_and     */               W_METHOD 4, -1, Fmain_and, 0, __Fmain_and_END - Fmain_and
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main_or      */               W_METHOD 5, -1, Fmain_or, 0, __Fmain_or_END - Fmain_or
/* $ret<Object> */               W_METHOD_ARG -1, 0
