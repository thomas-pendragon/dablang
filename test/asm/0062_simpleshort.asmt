## CODE

func fun1() {}

func fun2() {}

func main_or()
{
  print(fun1() || fun2());
}

## OPTIONS

--entry=main_or

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _CODE, "code"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_SECTION _NDAT, "ndat"
                                 W_END_HEADER 
 
                   _CODE:
                                 NOP 
 
                   F__init_0:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_0_END:
                                 NOP 
 
                   Ffun1:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __Ffun1_END:
                                 NOP 
 
                   Ffun2:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __Ffun2_END:
                                 NOP 
 
                   Fmain_or:
                                 STACK_RESERVE 0
/* fun1         */               CALL R0, S1
                                 JMP_IF R0, L1, L2
                   L2:
/* fun2         */               CALL R0, S2
                                 JMP L1
                   L1:
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Fmain_or_END:
                                 NOP 
 
                   _SDAT:
                                 W_STRING "__init_0" 
                                 W_STRING "fun1" 
                                 W_STRING "fun2" 
                                 W_STRING "main_or" 
 
                   _SYMB:
/* __init_0     */               W_SYMBOL _SDAT + 0 
/* fun1         */               W_SYMBOL _SDAT + 9 
/* fun2         */               W_SYMBOL _SDAT + 14 
/* main_or      */               W_SYMBOL _SDAT + 19 
 
                   _FUNC:
/* __init_0     */               W_METHOD 0, -1, F__init_0, 0, __F__init_0_END - F__init_0, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* fun1         */               W_METHOD 1, -1, Ffun1, 0, __Ffun1_END - Ffun1, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* fun2         */               W_METHOD 2, -1, Ffun2, 0, __Ffun2_END - Ffun2, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main_or      */               W_METHOD 3, -1, Fmain_or, 0, __Fmain_or_END - Fmain_or, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
 
                   _NDAT:
                                 W_BYTE 0
