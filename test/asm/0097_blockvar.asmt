## CODE

func foo(a,b=nil) {
}

func main()
{
  var a = ^ {
    print(1);
  };
  foo(a) ^ {
    print(2);
  };
}

## COMMENT

Block must be converted to a variable.

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _CODE, "code"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_END_HEADER 
 
                   _CODE:
                                 NOP 
 
                   F__init:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_END:
                                 NOP 
 
                   Ffoo:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __Ffoo_END:
                                 NOP 
 
                   Fmain:
                                 STACK_RESERVE 0
                                 LOAD_METHOD R0, S5
                                 LOAD_METHOD R1, S6
                                 MARK_LOCAL_BLOCK R2, R1
/* foo          */               CALL RNIL, S3, R0, R2
                                 RETURN RNIL
                   __Fmain_END:
                                 NOP 
 
                   Fmain__block1:
                                 STACK_RESERVE 0
/* 1            */               LOAD_NUMBER R0, 1
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Fmain__block1_END:
                                 NOP 
 
                   Fmain__block2:
                                 STACK_RESERVE 0
/* 2            */               LOAD_NUMBER R0, 2
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Fmain__block2_END:
                                 NOP 
 
                   _SDAT:
                                 W_STRING "__init" 
                                 W_STRING "a" 
                                 W_STRING "b" 
                                 W_STRING "foo" 
                                 W_STRING "main" 
                                 W_STRING "main__block1" 
                                 W_STRING "main__block2" 
 
                   _SYMB:
/* __init       */               W_SYMBOL _SDAT + 0 
/* a            */               W_SYMBOL _SDAT + 7 
/* b            */               W_SYMBOL _SDAT + 9 
/* foo          */               W_SYMBOL _SDAT + 11 
/* main         */               W_SYMBOL _SDAT + 15 
/* main__block1 */               W_SYMBOL _SDAT + 20 
/* main__block2 */               W_SYMBOL _SDAT + 33 
 
                   _FUNC:
/* __init       */               W_METHOD 0, -1, F__init, 0, __F__init_END - F__init
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* foo          */               W_METHOD 3, -1, Ffoo, 2, __Ffoo_END - Ffoo
/* a<Object>    */               W_METHOD_ARG 1, 0
/* b<Object>    */               W_METHOD_ARG 2, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main         */               W_METHOD 4, -1, Fmain, 0, __Fmain_END - Fmain
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main__block1 */               W_METHOD 5, -1, Fmain__block1, 0, __Fmain__block1_END - Fmain__block1
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main__block2 */               W_METHOD 6, -1, Fmain__block2, 0, __Fmain__block2_END - Fmain__block2
/* $ret<Object> */               W_METHOD_ARG -1, 0
