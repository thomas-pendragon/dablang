## CODE

func foo(a, b)
{
  if (a)
  {
    if (b)
    {
      print("a && b");
    }
    else
    {
      print("a && !b");
    };
  }
  else
  {
    if (b)
    {
      print("!a && b");    
    }
    else
    {
      print("!a && !b");
    };
  };
}

## OPTIONS

--entry=foo

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _DATA, "data"
                                 W_SECTION _CODE, "code"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_END_HEADER 
 
                   _DATA:
                                 W_STRING "!a && !b" 
                                 W_STRING "!a && b" 
                                 W_STRING "a && !b" 
                                 W_STRING "a && b" 
 
                   _CODE:
                                 NOP 
 
                   F__init:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_END:
                                 NOP 
 
                   Ffoo:
                                 STACK_RESERVE 0
/* a            */               LOAD_ARG R0, 0
/* b            */               LOAD_ARG R1, 1
                                 JMP_IF R0, L1, L2
                   L1:
                                 JMP_IF R1, L3, L4
                   L3:
/* "a && b"     */               LOAD_STRING R2, _DATA + 25, 6
/* PRINT        */               SYSCALL RNIL, 0, R2
                                 JMP L5
                   L4:
/* "a && !b"    */               LOAD_STRING R3, _DATA + 17, 7
/* PRINT        */               SYSCALL RNIL, 0, R3
                                 JMP L5
                   L2:
                                 JMP_IF R1, L6, L7
                   L6:
/* "!a && b"    */               LOAD_STRING R4, _DATA + 9, 7
/* PRINT        */               SYSCALL RNIL, 0, R4
                                 JMP L5
                   L7:
/* "!a && !b"   */               LOAD_STRING R5, _DATA + 0, 8
/* PRINT        */               SYSCALL RNIL, 0, R5
                                 JMP L5
                   L5:
                                 RETURN RNIL
                   __Ffoo_END:
                                 NOP 
 
                   _SDAT:
                                 W_STRING "__init" 
                                 W_STRING "a" 
                                 W_STRING "b" 
                                 W_STRING "foo" 
 
                   _SYMB:
/* __init       */               W_SYMBOL _SDAT + 0 
/* a            */               W_SYMBOL _SDAT + 7 
/* b            */               W_SYMBOL _SDAT + 9 
/* foo          */               W_SYMBOL _SDAT + 11 
 
                   _FUNC:
/* __init       */               W_METHOD_EX 0, -1, F__init, 0
                                 W_METHOD_LEN __F__init_END - F__init
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* foo          */               W_METHOD_EX 3, -1, Ffoo, 2
                                 W_METHOD_LEN __Ffoo_END - Ffoo
/* a<Object>    */               W_METHOD_ARG 1, 0
/* b<Object>    */               W_METHOD_ARG 2, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
