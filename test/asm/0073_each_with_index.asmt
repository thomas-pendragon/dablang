## CODE

class Array
{
  func each_with_index()
  {
    var index = 0;
    var count = self.count;
    while (index != count)
    {
      yield(self[index], index);
      index = index + 1;
    }
  }
}

## OPTIONS

--no-strip

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _CODE, "code"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_SECTION _NDAT, "ndat"
                                 W_END_HEADER 
 
                   _CODE:
                                 NOP 
 
                   F__init_0:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_0_END:
                                 NOP 
 
                   CArray_Feach_with_index:
                                 STACK_RESERVE 0
/* 0            */               LOAD_NUMBER R0, 0
                                 LOAD_SELF R1
/* count        */               INSTCALL R2, R1, S5
                                 JMP L1
                   L1:
/* !=           */               INSTCALL R3, R0, S0, R2
                                 JMP_IF R3, L2, L3
                   L2:
                                 LOAD_SELF R4
/* []           */               INSTCALL R5, R4, S2, R0
                                 LOAD_CURRENT_BLOCK R6
/* call         */               INSTCALL RNIL, R6, S4, R5, R0
/* 1            */               LOAD_NUMBER R7, 1
/* +            */               INSTCALL R0, R0, S1, R7
                                 JMP L1
                   L3:
                                 RETURN RNIL
                   __CArray_Feach_with_index_END:
                                 NOP 
 
                   _SDAT:
                                 W_STRING "!=" 
                                 W_STRING "+" 
                                 W_STRING "[]" 
                                 W_STRING "__init_0" 
                                 W_STRING "call" 
                                 W_STRING "count" 
                                 W_STRING "each_with_index" 
 
                   _SYMB:
/* !=           */               W_SYMBOL _SDAT + 0 
/* +            */               W_SYMBOL _SDAT + 3 
/* []           */               W_SYMBOL _SDAT + 5 
/* __init_0     */               W_SYMBOL _SDAT + 8 
/* call         */               W_SYMBOL _SDAT + 17 
/* count        */               W_SYMBOL _SDAT + 22 
/* each_with_in */               W_SYMBOL _SDAT + 28 
 
                   _FUNC:
/* __init_0     */               W_METHOD 3, -1, F__init_0, 0, __F__init_0_END - F__init_0, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* each_with_in */               W_METHOD 6, 5, CArray_Feach_with_index, 0, __CArray_Feach_with_index_END - CArray_Feach_with_index, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
 
                   _NDAT:
                                 W_BYTE 0
