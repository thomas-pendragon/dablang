## CODE

func bar(a) {
}

func main()
{
  var foo = 15;
  var a = ^ {
    print(foo);
  };
  bar(a) ^ {
    print(foo);
  };
}

## COMMENT

Block variable must be captured.

## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _CODE, "code"
                                 W_SECTION _CLAS, "clas"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_SECTION _NDAT, "ndat"
                                 W_END_HEADER 
 
                   _CODE:
                                 NOP 
 
                   F__init_0:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_0_END:
                                 NOP 
 
                   Fbar:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __Fbar_END:
                                 NOP 
 
                   Fmain:
                                 STACK_RESERVE 0
/* 15           */               LOAD_NUMBER R0, 15
                                 BOX R1, R0
                                 LOAD_SELF R2
/* __block_main */               LOAD_CLASS R3, 256
/* new          */               INSTCALL R4, R3, S12, R2, R1
                                 LOAD_SELF R5
/* __block_main */               LOAD_CLASS R6, 257
/* new          */               INSTCALL R7, R6, S12, R5, R1
                                 LOAD_LOCAL_BLOCK R8, R7
/* bar          */               CALL RNIL, S8, R4, R8
                                 RELEASE R0
                                 RELEASE R1
                                 RELEASE R2
                                 RELEASE R3
                                 RELEASE R4
                                 RELEASE R5
                                 RELEASE R6
                                 RELEASE R7
                                 RELEASE R8
                                 RETURN RNIL
                   __Fmain_END:
                                 NOP 
 
                   C__block_main0_F__construct:
                                 STACK_RESERVE 0
/* arg_self     */               LOAD_ARG R0, 0
                                 RELEASE_INSTVAR S13
/* @self=       */               SET_INSTVAR S13, R0
                                 RETAIN_INSTVAR S13
/* arg_foo      */               LOAD_ARG R1, 1
                                 NEW_ARRAY R2, R1
                                 RELEASE_INSTVAR S10
/* @closure=    */               SET_INSTVAR S10, R2
                                 RETAIN_INSTVAR S10
                                 RELEASE R0
                                 RELEASE R1
                                 RELEASE R2
                                 RETURN RNIL
                   __C__block_main0_F__construct_END:
                                 NOP 
 
                   C__block_main0_Fcall:
                                 STACK_RESERVE 0
/* 0            */               LOAD_NUMBER R0, 0
/* @closure     */               GET_INSTVAR R1, S10
/* []           */               INSTCALL R2, R1, S0, R0
                                 UNBOX R3, R2
/* PRINT        */               SYSCALL RNIL, 0, R3
                                 RELEASE R0
                                 RELEASE R1
                                 RELEASE R2
                                 RELEASE R3
                                 RETURN RNIL
                   __C__block_main0_Fcall_END:
                                 NOP 
 
                   C__block_main1_F__construct:
                                 STACK_RESERVE 0
/* arg_self     */               LOAD_ARG R0, 0
                                 RELEASE_INSTVAR S13
/* @self=       */               SET_INSTVAR S13, R0
                                 RETAIN_INSTVAR S13
/* arg_foo      */               LOAD_ARG R1, 1
                                 NEW_ARRAY R2, R1
                                 RELEASE_INSTVAR S10
/* @closure=    */               SET_INSTVAR S10, R2
                                 RETAIN_INSTVAR S10
                                 RELEASE R0
                                 RELEASE R1
                                 RELEASE R2
                                 RETURN RNIL
                   __C__block_main1_F__construct_END:
                                 NOP 
 
                   C__block_main1_Fcall:
                                 STACK_RESERVE 0
/* 0            */               LOAD_NUMBER R0, 0
/* @closure     */               GET_INSTVAR R1, S10
/* []           */               INSTCALL R2, R1, S0, R0
                                 UNBOX R3, R2
/* PRINT        */               SYSCALL RNIL, 0, R3
                                 RELEASE R0
                                 RELEASE R1
                                 RELEASE R2
                                 RELEASE R3
                                 RETURN RNIL
                   __C__block_main1_Fcall_END:
                                 NOP 
 
                   _CLAS:
/* __block_main */               W_CLASS 256, 14, 1
/* __block_main */               W_CLASS 257, 14, 2
 
                   _SDAT:
                                 W_STRING "[]" 
                                 W_STRING "__block_main0" 
                                 W_STRING "__block_main1" 
                                 W_STRING "__construct" 
                                 W_STRING "__init_0" 
                                 W_STRING "a" 
                                 W_STRING "arg_foo" 
                                 W_STRING "arg_self" 
                                 W_STRING "bar" 
                                 W_STRING "call" 
                                 W_STRING "closure" 
                                 W_STRING "main" 
                                 W_STRING "new" 
                                 W_STRING "self" 
 
                   _SYMB:
/* []           */               W_SYMBOL _SDAT + 0 
/* __block_main */               W_SYMBOL _SDAT + 3 
/* __block_main */               W_SYMBOL _SDAT + 17 
/* __construct  */               W_SYMBOL _SDAT + 31 
/* __init_0     */               W_SYMBOL _SDAT + 43 
/* a            */               W_SYMBOL _SDAT + 52 
/* arg_foo      */               W_SYMBOL _SDAT + 54 
/* arg_self     */               W_SYMBOL _SDAT + 62 
/* bar          */               W_SYMBOL _SDAT + 71 
/* call         */               W_SYMBOL _SDAT + 75 
/* closure      */               W_SYMBOL _SDAT + 80 
/* main         */               W_SYMBOL _SDAT + 88 
/* new          */               W_SYMBOL _SDAT + 93 
/* self         */               W_SYMBOL _SDAT + 97 
 
                   _FUNC:
/* __init_0     */               W_METHOD 4, -1, F__init_0, 0, __F__init_0_END - F__init_0, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* bar          */               W_METHOD 8, -1, Fbar, 1, __Fbar_END - Fbar, 0
/* a<Object>    */               W_METHOD_ARG 5, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main         */               W_METHOD 11, -1, Fmain, 0, __Fmain_END - Fmain, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* __construct  */               W_METHOD 3, 256, C__block_main0_F__construct, 2, __C__block_main0_F__construct_END - C__block_main0_F__construct, 0
/* arg_self<Obj */               W_METHOD_ARG 7, 0
/* arg_foo<Obje */               W_METHOD_ARG 6, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* call         */               W_METHOD 9, 256, C__block_main0_Fcall, 0, __C__block_main0_Fcall_END - C__block_main0_Fcall, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* __construct  */               W_METHOD 3, 257, C__block_main1_F__construct, 2, __C__block_main1_F__construct_END - C__block_main1_F__construct, 0
/* arg_self<Obj */               W_METHOD_ARG 7, 0
/* arg_foo<Obje */               W_METHOD_ARG 6, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* call         */               W_METHOD 9, 257, C__block_main1_Fcall, 0, __C__block_main1_Fcall_END - C__block_main1_Fcall, 0
/* $ret<Object> */               W_METHOD_ARG -1, 0
 
                   _NDAT:
                                 W_BYTE 0
