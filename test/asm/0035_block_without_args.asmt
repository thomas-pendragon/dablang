## CODE

func foo()
{
  print(has_block?);
}

func main()
{
  foo() ^ {  };
}

## OPTIONS



## EXPECT

/* Dab dev 2    */                
 
                                 W_HEADER 3
                                 W_OFFSET 0
                                 W_SECTION _CODE, "code"
                                 W_SECTION _CLAS, "clas"
                                 W_SECTION _SDAT, "symd"
                                 W_SECTION _SYMB, "symb"
                                 W_SECTION _FUNC, "fext"
                                 W_END_HEADER 
 
                   _CODE:
                                 NOP 
 
                   F__init:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __F__init_END:
                                 NOP 
 
                   Ffoo:
                                 STACK_RESERVE 0
                                 LOAD_HAS_BLOCK R0
/* PRINT        */               SYSCALL RNIL, 0, R0
                                 RETURN RNIL
                   __Ffoo_END:
                                 NOP 
 
                   Fmain:
                                 STACK_RESERVE 0
/* __block_main */               LOAD_CLASS R0, 256
/* new          */               INSTCALL R1, R0, S5
                                 LOAD_LOCAL_BLOCK R2, R1
/* foo          */               CALL RNIL, S3, R2
                                 RETURN RNIL
                   __Fmain_END:
                                 NOP 
 
                   C__block_main0_Fcall:
                                 STACK_RESERVE 0
                                 RETURN RNIL
                   __C__block_main0_Fcall_END:
                                 NOP 
 
                   _CLAS:
/* __block_main */               W_CLASS 256, 14, 0
 
                   _SDAT:
                                 W_STRING "__block_main0" 
                                 W_STRING "__init" 
                                 W_STRING "call" 
                                 W_STRING "foo" 
                                 W_STRING "main" 
                                 W_STRING "new" 
 
                   _SYMB:
/* __block_main */               W_SYMBOL _SDAT + 0 
/* __init       */               W_SYMBOL _SDAT + 14 
/* call         */               W_SYMBOL _SDAT + 21 
/* foo          */               W_SYMBOL _SDAT + 26 
/* main         */               W_SYMBOL _SDAT + 30 
/* new          */               W_SYMBOL _SDAT + 35 
 
                   _FUNC:
/* __init       */               W_METHOD 1, -1, F__init, 0, __F__init_END - F__init
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* foo          */               W_METHOD 3, -1, Ffoo, 0, __Ffoo_END - Ffoo
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* main         */               W_METHOD 4, -1, Fmain, 0, __Fmain_END - Fmain
/* $ret<Object> */               W_METHOD_ARG -1, 0
/* call         */               W_METHOD 2, 256, C__block_main0_Fcall, 0, __C__block_main0_Fcall_END - C__block_main0_Fcall
/* $ret<Object> */               W_METHOD_ARG -1, 0
